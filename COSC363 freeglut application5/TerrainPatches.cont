#version 400

layout(vertices = 4) out;

in vec2 v_TexCoord[];
in vec3 v_Col[];

uniform mat4 mvpMatrix;
uniform mat4 mvMatrix;

uniform sampler2D heightMap;

out vec2 tc_TexCoord[];
out vec3 tc_Col[];

float calcLevel(float zavg) {
	return (((zavg + 100) * 18) / 300) + 12; // 12 to 18
}

void main()
{
	// sets outer and inner tess levels based on average z of 4 patch vertices

	gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;
	tc_TexCoord[gl_InvocationID] = v_TexCoord[gl_InvocationID];
	tc_Col[gl_InvocationID] = v_Col[gl_InvocationID];

	float z0 = (mvpMatrix * gl_in[0].gl_Position).z;
	float z1 = (mvpMatrix * gl_in[1].gl_Position).z;
	float z2 = (mvpMatrix * gl_in[2].gl_Position).z;
	float z3 = (mvpMatrix * gl_in[3].gl_Position).z;

	float level = calcLevel(-0.25 * (z0 + z1 + z2 + z3));

	float zavgLeft = calcLevel(-0.5 * (z0 + z3));
	float zavgRight = calcLevel(-0.5 * (z1 + z2));
	float zavgUp = calcLevel(-0.5 * (z2 + z3));
	float zavgDown = calcLevel(-0.5 * (z0 + z1)); 

	float outerLevelLeft = zavgLeft;
	float outerLevelRight = zavgRight;
	float outerLevelUp = zavgUp;
	float outerLevelDown = zavgDown;

    gl_TessLevelOuter[0] = outerLevelLeft;
    gl_TessLevelOuter[1] = outerLevelDown;
    gl_TessLevelOuter[2] = outerLevelRight;
    gl_TessLevelOuter[3] = outerLevelUp;

    gl_TessLevelInner[0] = level;
    gl_TessLevelInner[1] = level;
}